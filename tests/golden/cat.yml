out_code_readable: "{\n    \"code\": [\n        [\n            \"0\",\n          \
  \  \"ld\",\n            \"0\"\n        ],\n        [\n            \"1\",\n     \
  \       \"jz\",\n            \"5\"\n        ],\n        [\n            \"2\",\n\
  \            \"st\",\n            \"1\"\n        ],\n        [\n            \"3\"\
  ,\n            \"pop\",\n            \"\"\n        ],\n        [\n            \"\
  4\",\n            \"jmp\",\n            \"0\"\n        ],\n        [\n         \
  \   \"5\",\n            \"hlt\",\n            \"\"\n        ]\n    ],\n    \"memory\"\
  : []\n}"
out_log: "DEBUG   machine:simulation    PC:   0 ADDR:   3 MEM_OUT:   0 TOS:   0 COMMAND\
  \ ld   \tld 0\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 0\nDEBUG   machine:get_char      input: 's'\nINFO    machine:simulation    TOS:\
  \ 115\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:\
  \   1 ADDR:   0 MEM_OUT:   0 TOS: 115 COMMAND jz   \tjz 5\nINFO    machine:simulation\
  \    TOS: 115\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 115 COMMAND st   \tst 1\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 1\nINFO    machine:decode_and_execute_instruction We\
  \ are executing ST, TOS is 115\nINFO    machine:signal_wr     data_address: 1\n\
  DEBUG   machine:signal_wr     output: '' << 's'\nINFO    machine:simulation    TOS:\
  \ 115\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:\
  \   3 ADDR:   1 MEM_OUT:   0 TOS: 115 COMMAND pop  \tpop\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: 'm'\nINFO   \
  \ machine:simulation    TOS: 109\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 109 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 109\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 109 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 109\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr\
  \     output: 's' << 'm'\nINFO    machine:simulation    TOS: 109\nINFO    machine:simulation\
  \    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:   1 MEM_OUT:   0 TOS:\
  \ 109 COMMAND pop  \tpop\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: []\nDEBUG   machine:simulation    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:\
  \   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: []\nDEBUG   machine:simulation    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:\
  \   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction Instruction\
  \ has operand: 0\nDEBUG   machine:get_char      input: 'a'\nINFO    machine:simulation\
  \    TOS: 97\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  97 COMMAND jz   \tjz 5\nINFO    machine:simulation\
  \    TOS: 97\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  97 COMMAND st   \tst 1\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 1\nINFO    machine:decode_and_execute_instruction We\
  \ are executing ST, TOS is 97\nINFO    machine:signal_wr     data_address: 1\nDEBUG\
  \   machine:signal_wr     output: 'sm' << 'a'\nINFO    machine:simulation    TOS:\
  \ 97\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:\
  \   3 ADDR:   1 MEM_OUT:   0 TOS:  97 COMMAND pop  \tpop\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: 'l'\nINFO   \
  \ machine:simulation    TOS: 108\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 108\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 108\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr\
  \     output: 'sma' << 'l'\nINFO    machine:simulation    TOS: 108\nINFO    machine:simulation\
  \    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:   1 MEM_OUT:   0 TOS:\
  \ 108 COMMAND pop  \tpop\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: []\nDEBUG   machine:simulation    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:\
  \   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: []\nDEBUG   machine:simulation    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:\
  \   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction Instruction\
  \ has operand: 0\nDEBUG   machine:get_char      input: 'l'\nINFO    machine:simulation\
  \    TOS: 108\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND jz   \tjz 5\nINFO    machine:simulation\
  \    TOS: 108\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 108 COMMAND st   \tst 1\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 1\nINFO    machine:decode_and_execute_instruction We\
  \ are executing ST, TOS is 108\nINFO    machine:signal_wr     data_address: 1\n\
  DEBUG   machine:signal_wr     output: 'smal' << 'l'\nINFO    machine:simulation\
  \    TOS: 108\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   3 ADDR:   1 MEM_OUT:   0 TOS: 108 COMMAND pop  \tpop\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: 'P'\nINFO   \
  \ machine:simulation    TOS: 80\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  80 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 80\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  80 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 80\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr \
  \    output: 'small' << 'P'\nINFO    machine:simulation    TOS: 80\nINFO    machine:simulation\
  \    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:   1 MEM_OUT:   0 TOS:\
  \  80 COMMAND pop  \tpop\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: []\nDEBUG   machine:simulation    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:\
  \   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: []\nDEBUG   machine:simulation    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:\
  \   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction Instruction\
  \ has operand: 0\nDEBUG   machine:get_char      input: 'i'\nINFO    machine:simulation\
  \    TOS: 105\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 105 COMMAND jz   \tjz 5\nINFO    machine:simulation\
  \    TOS: 105\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 105 COMMAND st   \tst 1\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 1\nINFO    machine:decode_and_execute_instruction We\
  \ are executing ST, TOS is 105\nINFO    machine:signal_wr     data_address: 1\n\
  DEBUG   machine:signal_wr     output: 'smallP' << 'i'\nINFO    machine:simulation\
  \    TOS: 105\nINFO    machine:simulation    STACK: [0]\nDEBUG   machine:simulation\
  \    PC:   3 ADDR:   1 MEM_OUT:   0 TOS: 105 COMMAND pop  \tpop\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: 'p'\nINFO   \
  \ machine:simulation    TOS: 112\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 112 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 112\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 112 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 112\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr\
  \     output: 'smallPi' << 'p'\nINFO    machine:simulation    TOS: 112\nINFO   \
  \ machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:\
  \   1 MEM_OUT:   0 TOS: 112 COMMAND pop  \tpop\nINFO    machine:simulation    TOS:\
  \ 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation    PC:\
  \   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: 'e'\nINFO   \
  \ machine:simulation    TOS: 101\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 101 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 101\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 101 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 101\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr\
  \     output: 'smallPip' << 'e'\nINFO    machine:simulation    TOS: 101\nINFO  \
  \  machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:\
  \   1 MEM_OUT:   0 TOS: 101 COMMAND pop  \tpop\nINFO    machine:simulation    TOS:\
  \ 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation    PC:\
  \   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: 'r'\nINFO   \
  \ machine:simulation    TOS: 114\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS: 114 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 114\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS: 114 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 114\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr\
  \     output: 'smallPipe' << 'r'\nINFO    machine:simulation    TOS: 114\nINFO \
  \   machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:\
  \   1 MEM_OUT:   0 TOS: 114 COMMAND pop  \tpop\nINFO    machine:simulation    TOS:\
  \ 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation    PC:\
  \   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nDEBUG   machine:get_char      input: '\\n'\nINFO \
  \   machine:simulation    TOS: 10\nINFO    machine:simulation    STACK: [0]\nDEBUG\
  \   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND jz   \t\
  jz 5\nINFO    machine:simulation    TOS: 10\nINFO    machine:simulation    STACK:\
  \ [0]\nDEBUG   machine:simulation    PC:   2 ADDR:   0 MEM_OUT:   0 TOS:  10 COMMAND\
  \ st   \tst 1\nINFO    machine:decode_and_execute_instruction Instruction has operand:\
  \ 1\nINFO    machine:decode_and_execute_instruction We are executing ST, TOS is\
  \ 10\nINFO    machine:signal_wr     data_address: 1\nDEBUG   machine:signal_wr \
  \    output: 'smallPiper' << '\\n'\nINFO    machine:simulation    TOS: 10\nINFO\
  \    machine:simulation    STACK: [0]\nDEBUG   machine:simulation    PC:   3 ADDR:\
  \   1 MEM_OUT:   0 TOS:  10 COMMAND pop  \tpop\nINFO    machine:simulation    TOS:\
  \ 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation    PC:\
  \   4 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND jmp  \tjmp 0\nINFO    machine:simulation\
  \    TOS: 0\nINFO    machine:simulation    STACK: []\nDEBUG   machine:simulation\
  \    PC:   0 ADDR:   1 MEM_OUT:   0 TOS:   0 COMMAND ld   \tld 0\nINFO    machine:decode_and_execute_instruction\
  \ Instruction has operand: 0\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: [0]\nDEBUG   machine:simulation    PC:   1 ADDR:   0 MEM_OUT:   0 TOS:\
  \   0 COMMAND jz   \tjz 5\nINFO    machine:simulation    TOS: 0\nINFO    machine:simulation\
  \    STACK: [0]\nDEBUG   machine:simulation    PC:   5 ADDR:   0 MEM_OUT:   0 TOS:\
  \   0 COMMAND hlt  \thlt\nINFO    machine:simulation    output_buffer: 'smallPiper\\\
  n'"
source_code: "section .code:\n.start:\n.loop:\n    ld 0\n    jz .hlt\n    st 1\n \
  \   pop\n    jmp .loop\n.hlt:\n    hlt\n"
stdin: 'smallPiper

  '
stdout: '''smallPiper

  ''

  '
